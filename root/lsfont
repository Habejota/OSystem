UnicodeBlocks="0x0020 0x007E Basic Latin
0x0080 0x00FF Latin-1 Supplement
0x0100 0x017F Latin Extended-A
0x0180 0x024F Latin Extended-B
0x0250 0x02AF IPA Extensions
0x02B0 0x02FF Spacing Modifier Letters
0x0370 0x03FF Greek and Coptic
0x0400 0x04FF Cyrillic
0x0530 0x058F Armenian
0x0600 0x06FF Arabic
0x0750 0x077F Arabic Supplement
0x07C0 0x07FF NKo
0x08A0 0x08FF Arabic Extended-A
0x0900 0x097F Devanagari
0x0980 0x09FF Bengali
0x0A00 0x0A7F Gurmukhi
0x0A80 0x0AFF Gujarati
0x0B00 0x0B7F Oriya
0x0B80 0x0BFF Tamil
0x0C00 0x0C7F Telugu
0x0C80 0x0CFF Kannada
0x0D00 0x0D7F Malayalam
0x0D80 0x0DFF Sinhala
0x0E00 0x0E7F Thai
0x0E80 0x0EFF Lao
0x0F00 0x0FFF Tibetan
0x1000 0x109F Myanmar
0x10A0 0x10FF Georgian
0x1100 0x11FF Hangul Jamo
0x1200 0x137F Ethiopic
0x1380 0x139F Ethiopic Supplement
0x13A0 0x13FF Cherokee
0x1400 0x167F Unified Canadian Aboriginal Syllabics
0x1680 0x169F Ogham
0x16A0 0x16FF Runic
0x1780 0x17FF Khmer
0x1800 0x18AF Mongolian
0x18B0 0x18FF Unified Canadian Aboriginal Syllabics Extended
0x1950 0x197F Tai Le
0x1980 0x19DF New Tai Lue
0x19E0 0x19FF Khmer Symbols
0x1A00 0x1A1F Buginese
0x1C50 0x1C7F Ol Chiki
0x1C90 0x1CBF Georgian Extended
0x1D00 0x1D7F Phonetic Extensions
0x1D80 0x1DBF Phonetic Extensions Supplement
0x1E00 0x1EFF Latin Extended Additional
0x1F00 0x1FFF Greek Extended
0x2000 0x206F General Punctuation
0x2070 0x209F Superscripts and Subscripts
0x20A0 0x20CF Currency Symbols
0x2100 0x214F Letterlike Symbols
0x2150 0x218F Number Forms
0x2190 0x21FF Arrows
0x2200 0x22FF Mathematical Operators
0x2300 0x23FF Miscellaneous Technical
0x2460 0x24FF Enclosed Alphanumerics
0x2500 0x257F Box Drawing
0x2580 0x259F Block Elements
0x25A0 0x25FF Geometric Shapes
0x2600 0x26FF Miscellaneous Symbols
0x2700 0x27BF Dingbats
0x2800 0x28FF Braille Patterns
0x2B00 0x2BFF Miscellaneous Symbols and Arrows
0x2C00 0x2C5F Glagolitic
0x2D00 0x2D2F Georgian Supplement
0x2D30 0x2D7F Tifinagh
0x2D80 0x2DDF Ethiopic Extended
0x2E80 0x2EFF CJK Radicals Supplement
0x2F00 0x2FDF Kangxi Radicals
0x2FF0 0x2FFF Ideographic Description Characters
0x3000 0x303F CJK Symbols and Punctuation
0x3040 0x309F Hiragana
0x30A0 0x30FF Katakana
0x3100 0x312F Bopomofo
0x3130 0x318F Hangul Compatibility Jamo
0x3190 0x319F Kanbun
0x31A0 0x31BF Bopomofo Extended
0x31C0 0x31EF CJK Strokes
0x31F0 0x31FF Katakana Phonetic Extensions
0x3200 0x32FF Enclosed CJK Letters and Months
0x3300 0x33FF CJK Compatibility
0x3400 0x4DBF CJK Unified Ideographs Extension A
0x4DC0 0x4DFF Yijing Hexagram Symbols
0x4E00 0x9FFF CJK Unified Ideographs
0xA000 0xA48F Yi Syllables
0xA490 0xA4CF Yi Radicals
0xA4D0 0xA4FF Lisu
0xA500 0xA63F Vai
0xA840 0xA87F Phags-pa
0xA8E0 0xA8FF Devanagari Extended
0xA960 0xA97F Hangul Jamo Extended-A
0xA980 0xA9DF Javanese
0xA9E0 0xA9FF Myanmar Extended-B
0xAA60 0xAA7F Myanmar Extended-A
0xAB00 0xAB2F Ethiopic Extended-A
0xAB30 0xAB6F Latin Extended-E
0xAB70 0xABBF Cherokee Supplement
0xAC00 0xD7AF Hangul Syllables
0xD7B0 0xD7FF Hangul Jamo Extended-B
0xE0A0 0xF8FF Private use area (contains MobaXterm specific symbols)
0xF900 0xFAFF CJK Compatibility Ideographs
0xFB50 0xFBFF Arabic Presentation Forms-A
0xFE10 0xFE1F Vertical Forms
0xFE30 0xFE4F CJK Compatibility Forms
0xFE50 0xFE6F Small Form Variants
0xFE70 0xFEFF Arabic Presentation Forms-B
0xFF00 0xFFEF Halfwidth and Fullwidth Forms
0x10300 0x1032F Old Italic
0x10330 0x1034F Gothic
0x10400 0x1044F Deseret
0x10480 0x104AF Osmanya
0x104B0 0x104FF Osage
0x10840 0x1085F Imperial Aramaic
0x10A60 0x10A7F Old South Arabian
0x10B40 0x10B5F Inscriptional Parthian
0x10B60 0x10B7F Inscriptional Pahlavi
0x10C00 0x10C4F Old Turkic
0x11000 0x1107F Brahmi
0x110D0 0x110FF Sora Sompeng
0x111E0 0x111FF Sinhala Archaic Numbers
0x13000 0x1342F Egyptian Hieroglyphs
0x1D400 0x1D7FF Mathematical Alphanumeric Symbols
0x1E900 0x1E95F Adlam
0x1F000 0x1F02F Mahjong Tiles
0x1F030 0x1F09F Domino Tiles
0x1F0A0 0x1F0DF Playing Cards
0x1F100 0x1F19F Enclosed Alphanumeric Supplement
0x1F200 0x1F24F Enclosed Ideographic Supplement
0x1F300 0x1F5FF Miscellaneous Symbols and Pictographs
0x1F600 0x1F64F Emoticons
0x1F680 0x1F6FF Transport and Map Symbols
0x1F700 0x1F77F Alchemical Symbols
0x1F780 0x1F7EF Geometric Shapes Extended
0x1F800 0x1F8AF Supplemental Arrows-C
0x1F900 0x1F9FF Supplemental Symbols and Pictographs"


Groups="Latin:Basic Latin|Latin-1 Supplement|Latin Extended-A|Latin Extended-B
Shapes:Box Drawing|Block Elements|Geometric Shapes
Icons:Miscellaneous Symbols|Dingbats|Miscellaneous Symbols and Arrows|Private use area|Miscellaneous Symbols and Pictographs|Emoticons|Transport and Map Symbols|Alchemical Symbols|Geometric Shapes Extended|Supplemental Arrows-C|Supplemental Symbols and Pictographs"


Utf8Convert()
{
  local x="$1"
  local y=$x n=0
  while [ $y -gt 0 ]; do
    y=$((y>>1))
    n=$((n+1))
  done
  if [ $n -le 7 ]; then
    y=$x
  elif [ $n -le 11 ]; then
    y=" $(( ((x>> 6)&0x1F)+0xC0 )) $(( (x&0x3F)+0x80 ))" 
  elif [ $n -le 16 ]; then
    y=" $(( ((x>>12)&0x0F)+0xE0 )) $(( ((x>> 6)&0x3F)+0x80 )) $(( (x&0x3F)+0x80 ))"
  else
    y=" $(( ((x>>18)&0x07)+0xF0 )) $(( ((x>>12)&0x3F)+0x80 )) $(( ((x>> 6)&0x3F)+0x80 )) $(( (x&0x3F)+0x80 ))"
  fi
  builtin printf -v y '\\x%x' $y
  if [ "$2" == "0" ]; then
    printf "\n[Unicode: 0x%04X]  " "$1"
    echo -n "[UTF8: $y]  "
  fi
  builtin echo -n -e $y
}


Pattern=""
if [ "$1" = "-group" ] || [ "$1" = "-all" ]; then
  [ "$1" = "-all" ] && Pattern="x"
  [ "$1" = "-group" ] && [ "$2" != "" ] && Pattern="`echo "$Groups" | grep -i "$2:" | awk -F':' '{print $2}'`"
fi

if [ "$Pattern" = "" ]; then
  echo -e "
  \e[4mUsage\e[0m:
        lsfont -all             # Print all the fonts glyphs
        lsfont -group Latin     # print only the latin glyphs
        lsfont -group Shapes    # print only the shapes glyphs
        lsfont -group Icons     # print only the icons glyphs

  \e[4mNote\e[0m:
        You can use the UTF-8 character representation in order to render a special character

  \e[4mExample\e[0m:
        echo -e \"\e[33m\\\\xee\\\\x82\\\\xa0\e[0m\"      # prints the \"branch\" icon
  "
  exit 0
fi


builtin echo -e "${UnicodeBlocks}" | busybox grep -E "$Pattern" | \
(
  while read i; do
    x="${i%% *}"; y="${i#* }"; y="${y%% *}"; z="${i#* * }"
    builtin echo
    builtin echo -e "\e[33m$x $y $z\e[0m"
    for (( k=$((x)); k<=$((y)); k++ )); do
      Utf8Convert "$k" "$(( k & 0x0f ))"
    done
    builtin echo
    builtin echo
  done
)
