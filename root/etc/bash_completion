#!/bin/bash

set +v

{
  BASH_COMPLETION="${BASH_COMPLETION:-/etc/bash_completion}"
} 2>/dev/null || :
readonly BASH_COMPLETION

UNAME="Cygwin"

default="-o default"
dirnames="-o dirnames"
filenames="-o filenames"
nospace="-o nospace"
bashdefault="-o bashdefault"
plusdirs="-o plusdirs"

shopt -s extglob progcomp
complete -d pushd

complete -A stopped -P '%' bg

complete -j -P '%' fg jobs disown

complete -v readonly unset

complete -A setopt set

complete -A shopt shopt

complete -a unalias

complete -b builtin




_filedir()
{
	local IFS=$'\t\n' xspec
	_expand || return 0
	if [ "${1:-}" = -d ]; then
		COMPREPLY=( ${COMPREPLY[@]:-} $( compgen -d -- $cur ) )
		return 0
	fi
	xspec=${1:+"!*.$1"}
	COMPREPLY=( ${COMPREPLY[@]:-} $( compgen -f -X "$xspec" -- "$cur" ) \
		    $( compgen -d -- "$cur" ) )
}

_expand()
{
	[ "$cur" != "${cur%\\}" ] && cur="$cur\\"
	if [[ "$cur" == \~*/* ]]; then
		eval cur=$cur
	elif [[ "$cur" == \~* ]]; then
		cur=${cur#\~}
		COMPREPLY=( $( compgen -P '~' -u $cur ) )
		return ${#COMPREPLY[@]}
	fi
}


_alias()
{
	local cur

	COMPREPLY=()
	cur=${COMP_WORDS[$COMP_CWORD]}

	case "$COMP_LINE" in
	*[^=])
		COMPREPLY=( $( compgen -A alias -S '=' -- $cur ) )
		;;
	*=)
		COMPREPLY=( "$( alias ${cur%=} 2>/dev/null | \
			     sed -e 's|^alias '$cur'\(.*\)$|\1|' )" )
		;;
	esac
}
complete -F _alias $nospace alias

_export()
{
	local cur

	COMPREPLY=()
	cur=${COMP_WORDS[$COMP_CWORD]}

	case "$COMP_LINE" in
	*=\$*)
		COMPREPLY=( $( compgen -v -P '$' -- ${cur#*=\$} ) )
		;;
	*[^=])
		COMPREPLY=( $( compgen -v -S '=' -- $cur ) )
		;;
	*=)
		COMPREPLY=( "$( eval echo -n \"$`echo ${cur%=}`\" |
			( echo -n \'
			  sed -e 's/'\''/'\''\\\'\'''\''/g'
			  echo -n \' ) )" )
		;;
	esac
}
complete -F _export $default $nospace export


_known_hosts()
{
	local cur
	cur=${COMP_WORDS[COMP_CWORD]}
	_expand || return 0
	COMPREPLY=( $( (eval /bin/busybox.exe cat ~/.ssh/known_hosts 2>/dev/null | /bin/busybox.exe cut -d' ' -f1 | /bin/busybox.exe cut -d',' -f1 | /bin/busybox.exe cut -d':' -f1 | /bin/busybox.exe sed -e 's/\[//g' -e 's/\]//g' 2>/dev/null; /bin/busybox.exe ls ~/.ssh/hostkeys/*%3A* 2>/dev/null | /bin/busybox.exe awk -F'%3A' '{print $2}' 2>/dev/null) | /bin/busybox.exe sort -u 2>/dev/null ) )
}

_known_users()
{
	local cur
	cur=${COMP_WORDS[COMP_CWORD]}
	_expand || return 0
	COMPREPLY=( $( builtin echo "$USERNAME"; builtin echo "root" ) )
}

_ssh()
{
	local cur prev
	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	_expand || return 0
	if [ "$cur" == "@" ]; then prev="@"; cur=""; fi
	case $prev in
		-@(l))
			_known_users
    	COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "${cur//\\\\/}" ) )
			;;
		*)
			_known_hosts
    	COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "${cur//\\\\/}" ) )
	[ "$prev" == "@" ] && [ "$COMPREPLY" != "" ] && COMPREPLY="@$COMPREPLY"
			;;
	esac
	return 0
}
complete -F _ssh ssh rsh rlogin telnet ping ftp


_man()
{
	local cur prev sect manpath UNAME
	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	_expand || return 0
	COMPREPLY=( $( /bin/busybox.exe tar -tf "/usr/share/man.tar" 2>/dev/null; (cd /usr/share/man && /bin/busybox.exe ls -1 *.man) 2>/dev/null; (for i in 1 2 3 4 5 6 7 8; do cd /usr/share/man/man$i && /bin/busybox.exe ls -1; done) 2>/dev/null ) )
	COMPREPLY=( $( compgen -W '${COMPREPLY[@]%%.*}' -- "${cur//\\\\/}" ) )
	return 0
}
complete -F _man $filenames man


_git()
{
	local cur prev sect
	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	_expand || return 0
	if [ "${prev##*/}" == "git" ] || [ "${prev##*/}" == "git" ] || [ "${prev##*/}" == "git.exe" ] || [ "${prev##*/}" == "git.exe" ]; then
	  COMPREPLY=( clone init add mv reset rm bisect grep log show status branch checkout commit diff merge rebase tag fetch pull push )
	  COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	else
	  COMPREPLY=( $( /bin/busybox.exe ls -1 ) )
	  COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	fi
	return 0
}
complete -F _git $filenames "git" "git.exe"


_aptcyg()
{
	local cur prev sect setupfile
	[ -e "/etc/setup/setup.moba.ini" ] && setupfile="/etc/setup/setup.moba.ini" || setupfile="/home/mobaxterm/.aptcyg/setup.ini"
	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	_expand || return 0
	if [ "${prev##*/}" == "apt-cyg" ] || [ "${prev##*/}" == "apt-get" ] || [ "${prev##*/}" == "apt-get2" ] || [ "${prev##*/}" == "MobApt" ] || [ "${prev##*/}" == "Mobapt" ] || [ "${prev##*/}" == "mobapt" ] || [ "$prev" == "--mirror" ] || [ "$prev" == "--file" ] || [ "$prev" == "--noupdate" ]; then
	  COMPREPLY=( install remove )
	  COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	elif [ "$prev" == "remove" ]; then
	  COMPREPLY=( $( [ -e "/etc/setup/installed.db" ] && /bin/busybox.exe awk '{print $1}' /etc/setup/installed.db ) )
	  COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	elif [ ${#cur} -gt 0 ]; then
	  COMPREPLY=( $( /bin/grep.exe -h -s "^@ $cur" "$setupfile" 2>/dev/null | (while read i; do builtin echo "${i##* }"; done) ) )
	  COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	fi
	return 0
}
complete -F _aptcyg $filenames "apt-cyg" "apt-get" "apt-get2" "mobapt" "MobApt" "Mobapt"


_docker()
{
    local cur prev sect _isRunMode
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    _isRunMode=no
    for (( i=0; i < ${#COMP_WORDS[@]}; i++ )); do
      if [ "${COMP_WORDS[i]}" = "run" ]; then
        _isRunMode=yes
      fi
    done
    _expand || return 0
    if [ "${prev##*/}" == "docker" ] || [ "${prev##*/}" == "docker.exe" ]; then
      COMPREPLY=( builder config container context image network node plugin secret service stack swarm system trust volume attach build commit cp create diff events exec export history images import info inspect kill load login logout logs pause port ps pull push rename restart rm rmi run save search start stats stop tag top unpause update version wait )
      COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
    elif [ "$prev" == "run" ] || [ "$prev" == "rmi" ] || [ "$prev" == "save" ] || [ "$_isRunMode" == "yes" ]; then
      COMPREPLY=( $( docker images 2>/dev/null | /bin/busybox.exe grep -v REPOSITORY | /bin/busybox.exe awk '{print $1}' ) )
      COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
    elif [ "$prev" == "attach" ] || [ "$prev" == "commit" ] || [ "$prev" == "exec" ] || [ "$prev" == "export" ] || [ "$prev" == "kill" ] || [ "$prev" == "pause" ] || [ "$prev" == "rename" ] || [ "$prev" == "restart" ] || [ "$prev" == "rm" ] || [ "$prev" == "start" ] || [ "$prev" == "stop" ] || [ "$prev" == "top" ] || [ "$prev" == "update" ] || [ "$prev" == "unpause" ] || [ "$prev" == "wait" ]; then
      COMPREPLY=( $( docker ps -a 2>/dev/null | /bin/busybox.exe grep -v "CONTAINER ID" | /bin/busybox.exe awk '{print $1" "$NF}' ) )
      COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
    elif [ "$prev" == "pull" ]; then
      COMPREPLY=( $( docker search "$cur" 2>/dev/null | /bin/busybox.exe grep -v DESCRIPTION | /bin/busybox.exe awk '{print $1}' ) )
      COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' -- "$cur" ) )
    else
      COMPREPLY=( $( /bin/busybox.exe ls -1 ) )
      COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
    fi
    return 0
}
complete -F _docker $dirnames "docker" "docker.exe"


_make()
{
	local file makef makef_dir="." makef_inc cur prev i
	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	case $prev in
		-@(f|o|W))
			_filedir
			return 0
			;;
		-@(I|C))
			_filedir -d
			return 0
			;;
	esac

	if [[ "$cur" == *=* ]]; then
		prev=${cur/=*/}
		cur=${cur/*=/}
		case "$prev" in
			--@(file|makefile))
				_filedir
				return 0
				;;
			--@(directory|include-dir))
				_filedir -d
				return 0
				;;
		esac
	fi

	if [[ "$cur" == -* ]]; then
		COMPREPLY=( $( compgen -W '-b -m -B -C -d -e -f -h -i -I\
			-j -l -k -n -o -p -q -r -R - s -S -t -v -w -W \
			--always-make --directory= --debug \
			--environment-overrides --file= --makefile= --help \
			--ignore-errors --include-dir= --jobs --load-average \
			--max-load --keep-going --just-print --dry-run \
			--recon --old-file= --assume-old= --print-data-base \
			--question --no-builtin-rules --no-builtin-variables \
			--silent --quiet --no-keep-goind --stop --touch \
			--version --print-directory --no-print-directory \
			--what-if= --new-file= --assume-new= \
			--warn-undefined-variables' -- $cur ) )
	else
		for (( i=0; i < ${#COMP_WORDS[@]}; i++ )); do
			if [[ "${COMP_WORDS[i]}" == -C ]]; then
				eval makef_dir=${COMP_WORDS[i+1]}
				break
			fi
		done

		if [ -f ${makef_dir}/GNUmakefile ]; then
			makef=${makef_dir}/GNUmakefile
		elif [ -f ${makef_dir}/makefile ]; then
			makef=${makef_dir}/makefile
		elif [ -f ${makef_dir}/Makefile ]; then
			makef=${makef_dir}/Makefile
		else
			makef=${makef_dir}/*.mk
		fi
		for (( i=0; i < ${#COMP_WORDS[@]}; i++ )); do
			if [[ "${COMP_WORDS[i]}" == -f ]]; then
				eval makef=${COMP_WORDS[i+1]}
				break
			fi
		done

		[ ! -f $makef ] && return 0
 		makef_inc=$( grep -E '^-?include' $makef | sed -e "s,^.* ,"$makef_dir"/," )

 		for file in $makef_inc; do
 			[ -f $file ] && makef="$makef $file"
 		done

		COMPREPLY=( $( awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ \
				{split($1,A,/ /);for(i in A)print A[i]}' \
				$makef 2>/dev/null | command grep "^$cur" ))
	fi
} &&
complete -f -F _make $filenames make gmake gnumake pmake

_command()
{
	local cur func cline cspec noglob cmd done i \
	      _COMMAND_FUNC _COMMAND_FUNC_ARGS

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}
	done=
	while [ -z $done ] ; do
	cmd=${COMP_WORDS[1]}
	    if [[ "$cmd" == -* ]] ; then
		for (( i=1 ; i<=COMP_CWORD ; i++)) ; do
		    COMP_WORDS[i]=${COMP_WORDS[i+1]}
		done
		COMP_CWORD=$(($COMP_CWORD-1))
	    else 
		done=1
	    fi
	done

	if [ $COMP_CWORD -eq 1 ]; then
		COMPREPLY=( $( compgen -c -- $cur ) )
	elif complete -p $cmd &>/dev/null; then
		cspec=$( complete -p $cmd )
		if [ "${cspec#* -F }" != "$cspec" ]; then
			COMP_CWORD=$(( $COMP_CWORD - 1 ))

			func=${cspec#*-F }
			func=${func%% *}
			cline="${COMP_LINE#*( )$1 }"
		      	shopt -qo noglob; noglob=$?
		  	shopt -so noglob
			COMP_WORDS=( $cline )
			[ $noglob -eq 1 ] && shopt -uo noglob
			$func $cline
			COMP_CWORD=$(( $COMP_CWORD > 0 ? $COMP_CWORD : 1 ))
			cur=${COMP_WORDS[COMP_CWORD]}
			_COMMAND_FUNC=$func
			_COMMAND_FUNC_ARGS=( $cmd $2 $3 )
			COMP_LINE=$cline
			COMP_POINT=$(( ${COMP_POINT} - ${#1} - 1 ))
			$func $cmd $2 $3
			if [ "${cspec#*-o }" != "$cspec" ]; then
				cspec=${cspec#*-o }
				cspec=${cspec%% *}
				if [[ "$cspec" != @(dir|file)names ]]; then
					COMPREPLY=("${COMPREPLY[@]//\\\\:/:}")
				fi
			fi
		elif [ -n "$cspec" ]; then
			cspec=${cspec#complete};
			cspec=${cspec%%$cmd};
			COMPREPLY=( $( eval compgen "$cspec" -- "$cur" ) );
		fi
	fi

	[ ${#COMPREPLY[@]} -eq 0 ] && _filedir
}
complete -F _command $filenames nohup exec nice eval strace time ltrace then \
	else do vsound command xargs


_longopt()
{
	local cur opt

	cur=${COMP_WORDS[COMP_CWORD]}

	if [[ "$cur" == --*=* ]]; then
		opt=${cur%%=*}
		opt=${opt%\\*}
		cur=${cur#*=}
		_filedir
		COMPREPLY=( $( compgen -P "$opt=" -W '${COMPREPLY[@]}' -- $cur))
		return 0
	fi

	if [[ "$cur" == -* ]]; then
		COMPREPLY=( $( $1 --help 2>&1 | sed -e '/--/!d' \
				-e 's/.*\(--[-A-Za-z0-9]\+=\?\).*/\1/' | \
			       command grep "^$cur" | sort -u ) )
	elif [[ "$1" == @(mk|rm)dir ]]; then
		_filedir -d
	else
		_filedir
	fi
}

for i in env netstat seq uname units wget; do
  complete -F _longopt $default $i
done
unset i


_configure_func()
{
	local cur

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}

	[[ "$cur" != -* ]] && return 0

	if [ -n "$COMP_CONFIGURE_HINTS" ]; then
		COMPREPLY=( $( $1 --help | awk '/^  --[A-Za-z]/ { print $1; if ($2 ~ /--[A-Za-z]/) print $2 }' | sed -e 's/[[,].*//g' | grep ^$cur ) )

	else
		COMPREPLY=( $( $1 --help | awk '/^  --[A-Za-z]/ { print $1; if ($2 ~ /--[A-Za-z]/) print $2 }' | sed -e 's/[[,=].*//g' | grep ^$cur ) )
	fi
}
complete -F _configure_func $default configure

_service()
{
        local cur prev sect manpath UNAME

        COMPREPLY=()
        cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}

        _expand || return 0
	if [ "$prev" == "service" ]; then
          COMPREPLY=( $( command cd /etc/init.d/ 2>/dev/null; /bin/busybox.exe ls -1 2>/dev/null ) )
          COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	else
          COMPREPLY=( start stop restart status )
          COMPREPLY=( $( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ) )
	fi
        return 0
}
complete -F _service service




unset list

unset UNAME default dirnames filenames nospace bashdefault \
      plusdirs

